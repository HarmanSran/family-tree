{"version":3,"sources":["components/FamilyTree/augmentNetwork/augmentNetwork.js","components/FamilyTree/options/options.js","components/FamilyTree/FamilyTree.js","components/GithubButton/GithubButton.js","components/RecenterButton/RecenterButton.js","components/FamilyTreeContainer/familyTreeToNetwork/familyTreeToNetwork.js","components/FamilyTreeContainer/FamilyTreeContainer.js","App.js","index.js"],"names":["augmentEdges","network","edges","map","edge","label","undefined","color","includes","getNodeLabel","name","metadata","birth","death","birthYear","split","deathYear","lifespan","augmentNodes","nodes","id","level","details","gender","augmentNetwork","options","layout","hierarchical","direction","smooth","type","forceDirection","roundness","width","widthConstraint","heightConstraint","shape","labelHighlightBold","interaction","dragNodes","hover","physics","enabled","hierarchicalRepulsion","centralGravity","springLength","springConstant","nodeDistance","damping","solver","useStyles","makeStyles","canvasWrapper","height","FamilyTree","getNetwork","classes","className","data","fab","margin","top","right","left","position","bottom","GithubButton","Tooltip","title","aria-label","placement","Fab","githubFab","onClick","window","open","repository","RecenterButton","fit","defaultProps","parseId","parseInt","getNodes","json","levels","Object","keys","forEach","relations","father","mother","getNodeLevels","getEdges","entries","relation","relationId","push","from","to","familyTreeToNetwork","FamilyTreeContainer","familyTree","useState","setNetwork","n","FAMILY_TREE_FILE_PATH","App","setFamilyTree","isFetchError","setIsFetchError","useEffect","a","fetch","response","fetchFamilyTree","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0d5ed509.chunk.js","sourcesContent":["const augmentEdges = (network) => {\r\n  const { edges } = network;\r\n  return edges.map((edge) => ({\r\n    ...edge,\r\n    label: undefined,\r\n    color: ['husband', 'wife'].includes(edge.label) ? 'rgba(255, 117, 61)' : undefined,\r\n  }));\r\n};\r\n\r\nconst getNodeLabel = ({ name, metadata: { birth, death } }) => {\r\n  const birthYear = birth ? birth.split('-')[0] : null;\r\n  const deathYear = death ? death.split('-')[0] : null;\r\n  let lifespan = null;\r\n  if (birthYear && deathYear) {\r\n    lifespan = `${birthYear} - ${deathYear}`;\r\n  } else if (birthYear) {\r\n    lifespan = `${birthYear} -`;\r\n  } else if (deathYear) {\r\n    lifespan = `- ${deathYear}`;\r\n  }\r\n  return `${name}${lifespan ? `\\n${lifespan}` : ''}`;\r\n};\r\n\r\nconst getNodeColor = ({ metadata: { gender } }) => (gender === 'F' ? 'rgba(255, 189, 248)' : 'rgba(133, 222, 255)');\r\n\r\nconst augmentNodes = (network) => {\r\n  const { nodes } = network;\r\n  return nodes.map(({ id, level, details }) => ({\r\n    id,\r\n    level,\r\n    label: getNodeLabel(details),\r\n    color: getNodeColor(details),\r\n  }));\r\n};\r\n\r\n/**\r\n * Enhances basic visjs network with some pretty features (e.g. colors, edge type, labels)\r\n * @param {object} network - valid visjs network\r\n * @returns valid visjs network\r\n */\r\nconst augmentNetwork = (network) => ({\r\n  nodes: augmentNodes(network),\r\n  edges: augmentEdges(network),\r\n});\r\n\r\nexport default augmentNetwork;\r\n","const options = {\r\n  layout: {\r\n    hierarchical: {\r\n      direction: 'DU',\r\n    },\r\n  },\r\n  edges: {\r\n    smooth: {\r\n      type: 'cubicBezier',\r\n      forceDirection: 'vertical',\r\n      roundness: 1,\r\n    },\r\n    width: 2,\r\n  },\r\n  nodes: {\r\n    widthConstraint: 100,\r\n    heightConstraint: 50,\r\n    shape: 'box',\r\n    labelHighlightBold: false,\r\n  },\r\n  interaction: {\r\n    dragNodes: false,\r\n    hover: true,\r\n  },\r\n  physics: {\r\n    enabled: true,\r\n    hierarchicalRepulsion: {\r\n      centralGravity: 0.0,\r\n      springLength: 250,\r\n      springConstant: 0.01,\r\n      nodeDistance: 200,\r\n      damping: 0.09,\r\n    },\r\n    solver: 'hierarchicalRepulsion',\r\n  },\r\n};\r\n\r\nexport default options;\r\n","import PropTypes from 'prop-types';\r\nimport VisNetworkReactComponent from 'vis-network-react';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport augmentNetwork from './augmentNetwork/augmentNetwork';\r\nimport options from './options/options';\r\n\r\nconst useStyles = makeStyles({\r\n  canvasWrapper: {\r\n    height: '100%',\r\n  },\r\n});\r\n\r\n/**\r\n * Renders visjs network.\r\n * - Applies customized visjs options to network\r\n * - Augments network prop with visjs properties to make prettifed tree\r\n */\r\nconst FamilyTree = ({ network, getNetwork }) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.canvasWrapper}>\r\n      <VisNetworkReactComponent\r\n        data={augmentNetwork(network)}\r\n        options={options}\r\n        getNetwork={getNetwork}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nFamilyTree.propTypes = {\r\n  network: PropTypes.exact({\r\n    nodes: PropTypes.arrayOf(PropTypes.exact({\r\n      id: PropTypes.number.isRequired,\r\n      level: PropTypes.number.isRequired,\r\n      details: PropTypes.exact({\r\n        name: PropTypes.string.isRequired,\r\n        relations: PropTypes.shape({\r\n          father: PropTypes.number,\r\n          mother: PropTypes.number,\r\n        }).isRequired,\r\n        metadata: PropTypes.shape({\r\n          gender: PropTypes.oneOf(['M', 'F']).isRequired,\r\n          birth: PropTypes.string,\r\n          death: PropTypes.string,\r\n        }).isRequired,\r\n      }).isRequired,\r\n    })).isRequired,\r\n    edges: PropTypes.arrayOf(PropTypes.exact({\r\n      from: PropTypes.number.isRequired,\r\n      to: PropTypes.number.isRequired,\r\n      label: PropTypes.oneOf(['father', 'mother', 'husband', 'wife']).isRequired,\r\n    })).isRequired,\r\n  }).isRequired,\r\n  getNetwork: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FamilyTree;\r\n","import Fab from '@material-ui/core/Fab';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport GitHubIcon from '@material-ui/icons/GitHub';\r\nimport { repository } from '../../../package.json';\r\n\r\nconst useStyles = makeStyles({\r\n  fab: {\r\n    margin: 0,\r\n    top: 'auto',\r\n    right: 20,\r\n    left: 'auto',\r\n    position: 'fixed',\r\n    bottom: 20 + 56 + 20,\r\n  },\r\n});\r\n\r\n/**\r\n * Renders floating action button that links to Github Repo\r\n */\r\nconst GithubButton = () => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Tooltip title=\"Github Repo\" aria-label=\"github\" placement=\"left\">\r\n      <Fab\r\n        className={`${classes.fab} ${classes.githubFab}`}\r\n        color=\"default\"\r\n        onClick={() => window.open(repository)}\r\n      >\r\n        <GitHubIcon />\r\n      </Fab>\r\n    </Tooltip>\r\n  );\r\n};\r\n\r\nexport default GithubButton;\r\n","import Fab from '@material-ui/core/Fab';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport CenterFocusStrongIcon from '@material-ui/icons/CenterFocusStrong';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst useStyles = makeStyles({\r\n  fab: {\r\n    margin: 0,\r\n    top: 'auto',\r\n    right: 20,\r\n    left: 'auto',\r\n    position: 'fixed',\r\n    bottom: 20,\r\n  },\r\n});\r\n\r\n/**\r\n * Renders floating action button that recenters the network (if user has moved/zoomed it)\r\n */\r\nconst RecenterButton = ({ network }) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Tooltip title=\"Recenter Family Tree\" aria-label=\"recenter\" placement=\"left\">\r\n      <Fab\r\n        className={classes.fab}\r\n        color=\"primary\"\r\n        onClick={() => (typeof (network) === 'object' ? network.fit() : {})}\r\n      >\r\n        <CenterFocusStrongIcon />\r\n      </Fab>\r\n    </Tooltip>\r\n  );\r\n};\r\n\r\nRecenterButton.propTypes = {\r\n  network: PropTypes.shape({\r\n    fit: PropTypes.func.isRequired,\r\n  }),\r\n};\r\n\r\nRecenterButton.defaultProps = {\r\n  network: null,\r\n};\r\n\r\nexport default RecenterButton;\r\n","const parseId = (id) => parseInt(id, 10);\r\n\r\n/**\r\n * Returns object that maps id to 'level'\r\n *\r\n * Level is an integer that determine position (i.e. row) in family tree\r\n *\r\n * Level = 1 means bottom row of tree (the newest children)\r\n *\r\n * Highest level are the oldest ancestors (top row)\r\n *\r\n * @param {object} json From `tree.json`\r\n * @returns {object} levels\r\n */\r\nconst getNodeLevels = (json) => {\r\n  const levels = {};\r\n\r\n  Object.keys(json).forEach((id) => {\r\n    // If this person is not a parent, they will stay at bottom of tree\r\n    if (levels[id] === undefined) {\r\n      levels[id] = 1;\r\n    }\r\n\r\n    // Ensure parents are always one level above children\r\n    levels[json[id].relations.father] = levels[id] + 1;\r\n    levels[json[id].relations.mother] = levels[id] + 1;\r\n  });\r\n\r\n  return levels;\r\n};\r\n\r\n/**\r\n * Returns array containing nodes of the family tree\r\n *\r\n * Returned node shapes:\r\n * `id` is a unique key (integer)\r\n * `level` is required (integer)\r\n * `details` contains everything about this person from `tree.json` (object)\r\n *\r\n * @param {object} json From `tree.json`\r\n * @returns {array} nodes\r\n */\r\nconst getNodes = (json) => {\r\n  const levels = getNodeLevels(json);\r\n  return Object.keys(json).map((id) => ({ id: parseId(id), level: levels[id], details: json[id] }));\r\n};\r\n\r\n/**\r\n * Returns array containing edges of the family tree\r\n *\r\n * Returned edge shapes:\r\n * `from` is required (integer)\r\n * `to` is required (integer)\r\n * `label` is required (string)\r\n *\r\n * @param {object} json From `tree.json`\r\n * @returns {array} edges\r\n */\r\nconst getEdges = (json) => {\r\n  const edges = [];\r\n  // For each person\r\n  Object.keys(json).forEach((id) => {\r\n    // For each of that person's relations\r\n    Object.entries(json[id].relations).map(([relation, relationId]) => {\r\n      // Connect that person to that relation\r\n      edges.push({ from: relationId, to: parseId(id), label: relation });\r\n      return null;\r\n    });\r\n  });\r\n  return edges;\r\n};\r\n\r\n/**\r\n * Maps tree.json shape to Visjs network shape\r\n */\r\nconst familyTreeToNetwork = (json) => ({ nodes: getNodes(json), edges: getEdges(json) });\r\n\r\nexport default familyTreeToNetwork;\r\n","import PropTypes from 'prop-types';\r\nimport { useState } from 'react';\r\nimport FamilyTree from '../FamilyTree/FamilyTree';\r\nimport GithubButton from '../GithubButton/GithubButton';\r\nimport RecenterButton from '../RecenterButton/RecenterButton';\r\nimport familyTreeToNetwork from './familyTreeToNetwork/familyTreeToNetwork';\r\n\r\n/**\r\n * Maps family tree to a network graph:\r\n * { 0: {}, 1: {}, 2: {}, ...} -> { nodes, edges }\r\n */\r\nconst FamilyTreeContainer = ({ familyTree }) => {\r\n  const [network, setNetwork] = useState(null);\r\n  return (\r\n    <>\r\n      <FamilyTree network={familyTreeToNetwork(familyTree)} getNetwork={(n) => setNetwork(n)} />\r\n      <GithubButton />\r\n      <RecenterButton network={network} />\r\n    </>\r\n  );\r\n};\r\n\r\nFamilyTreeContainer.propTypes = {\r\n  familyTree: PropTypes.objectOf(PropTypes.shape({\r\n    relations: PropTypes.shape({\r\n      father: PropTypes.number,\r\n      mother: PropTypes.number,\r\n    }).isRequired,\r\n  })).isRequired,\r\n};\r\n\r\nexport default FamilyTreeContainer;\r\n","import { useEffect, useState } from 'react';\r\nimport FamilyTreeContainer from './components/FamilyTreeContainer/FamilyTreeContainer';\r\n\r\nconst FAMILY_TREE_FILE_PATH = 'data/tree.json';\r\n\r\n/**\r\n * Ensures `tree.json` is readable and parses it as JSON\r\n */\r\nconst App = () => {\r\n  const [familyTree, setFamilyTree] = useState(null);\r\n  const [isFetchError, setIsFetchError] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchFamilyTree = async () => {\r\n      try {\r\n        const response = await fetch(FAMILY_TREE_FILE_PATH);\r\n        const data = await response.json();\r\n        setFamilyTree(data);\r\n      } catch {\r\n        setIsFetchError(true);\r\n      }\r\n    };\r\n    fetchFamilyTree();\r\n  }, []);\r\n\r\n  if (familyTree !== null) {\r\n    return <FamilyTreeContainer familyTree={familyTree} />;\r\n  }\r\n  if (isFetchError) {\r\n    return `Encountered error while fetching ${FAMILY_TREE_FILE_PATH}`;\r\n  }\r\n  return 'Loading...';\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}